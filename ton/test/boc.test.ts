import { expect } from 'chai'
import { BOC } from '../src/boc'
import { hexToBytes } from '../src/utils/helpers'

describe('BOC', () => {
    const BOC_LAST_BASE64 = 'te6ccuICASMAAQAAJm0AAAAkAMwA6gGAAmIC/gMwA0oDWQNyA4wEhAT0BQ4FtgX2BugHWAekCEwIjAj2CUMJjgpaCnoLEAsuC0wLaguIC6gLxgvkDAIMIAw+DFwNCg0uDVIN/g4eDj4OXg58DpoOtg7SDu4PCg+wEDQQWBB4EMQREBEwEVARcBGOEa4RzhHuEg4SLhLYE2ATxBRGFGQUghSgFLwVYBXgFe4V/BYKFhgWJhY0FkIWUBZeFmwWehaIFtQW4hbwFv4XDBcaFygXNhdEF5AXtBfYGCUY0BjwGRAZXRmpGcgZ5hozGn8anBq4GwUbURtsG4gb1RwhHDwc4h0vHbId/x5RHpwevB8JH1UfdB+UH+EgACAeIGsgiiDXIPYhFiFjIYIhzyIbIjoi5CMxI7gkBSRoJLUlASWCJc8l7CY5JlYmoybAJw0nWSd0KBgoZSjkKTEpfSnJKhUq4CstK0wr4iwvLEwsmSy2LQMtIC1tLYot1y32LkMuYC6tLsovFy80L4Evni/rMAgwVTByML8w3DGKMjgyRjKTMqAyrjK8MwkzFjNjM3AzvTPKNBc0JDRxNH40yzTYNSU1MjV/NYw12TXmNjM2QDb0N2w4IDhtOHo4xzjUOSE5Ljk8OYk51TniOfA6PTqJOpY6pDrxOz07SjwAPLY8wjzIPRY9Kj1+PYs9lD54PpA+nj6tPrw+zD9wQBhAwEDMQNhBXkIeQqRCtkNaRBtEJESqRMZFd0YYRiRGMEa2R3ZH/EgOSM5JVElmSgtKeUs4Sz9LxUvWTHpM2wQQEe9Vqv///xEAAQACAAMABAGgm8ephwAAAAAEAQFcY8oAAAABAP////8AAAAAAAAAAGL7u90AABusl7vrgAAAG6yXu+uEpYk+AwAFOWIBXGPGAVw1xMQAAAADAAAAAAAAAC4ABQIRuOSN+0ZVPxAEAAYABwqKBPTVPFzdihzyG0ZA/Z/mBJ1yBqgO+orVswRwW9Ghgz0za8SUx1HcFeKT2oruLoomx5yUkuOsElnlsSJNKY+/ENoBbgFuAAsADBSJmYD0kiPZUykP36g26WWT2iA3GY68wcz8ZL8QwW+fhvAACEoz9v2aCe+A7qvC9i2h3Y6Njxlya+THPWSTqtk2VhEmjFQ8JXqzCxqvVlxyT5lrgSew1WEQPh5vGG5G6aL+jSx7p9yWwAD1APYA9wD4AJgAABusl6ypRAFcY8mtUGDeEa5UtZnyUWZSv8kV786DFV0ENsQUkqouFOLX3rb1GiR3IplBS223L+1UZy+klFYI0IbJ4XbYN5fnBSteAiWB+InEuMrAkZwPxE4l+P/9DMAIAAgACAAVAjKp+IARlU/EAAgCASAACQAKABW+AAADvLNVq0Zq0AAVv////7y9Dv2lY9A0W/TVPFzdihzyG0ZA/Z/mBJ1yBqgO+orVswRwW9Ghgz0zire8kc/uikSA5tJI792XKtIcd16h+cRO+PhEg96KGUIBbgASkCOv4v///xEA/////wAAAAAAAAAAAVxjyQAAAAFi+7vaAAAbrJesqUQBXGPGYAASABMAFAAVJFuQI6/i////EQD/////AAAAAAAAAAABXGPKAAAAAWL7u90AABusl7vrhAFcY8ZgAA0ADgAPABABEQAAAAAAAAAAUAARMhMdtc3JNOOXcP4CUgqFLYe5jp9eFGCXN/2PYC5God0p7ETUNyBAKrRSk9HHSEaboZwqfwF4wdahjVNsDNrEHei6AW0AEYIH4icS/H/+hnAAYgB+IjMAAAAAAAAAAP//////////gfiJxL8f/6GYKAB+ABY0VVYFBXh8evRXt1/LXGzQvukMsZdguMASeBnedPbBTQIbXMJZIizmRhXnEzCtaN1v/eOKo/DPF2/JtB2rCC+iFr8AGwAQzCaqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqsIyjH/9rdaTfgD6AKYApwCoAGuwQAAAAAAAAAAArjHlAAAN1kvWVKH//////////////////////////////////////////8AoSAEBDRhZGTMcB5HAoou+7uCSHdojFWI3aVx/gTlOrgNM7EMAATITslv1ooQGvZd9j8gshuttzHXVNdKRRvN/mR9pG838qiamUhqaVKTFYyGRZPN04LZpGPPs+x1U4wJQzWuvxOSisQFtABGCB+InEuMrAkZwACcAfiIzAAAAAAAAAAD//////////4H4icS4ysCRmCgAfgAWJFXMJqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqwjKMf/qDNwt+ABcApgAYAKgoSAEB3lrfRcA6dF/J06QY2eK6CW25waqne8CJi22eu2EdK0AABShIAQFGlzTBTSSwdU7e8/LK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'
    const BOC_LAST_HASH = 'af5d3e57d0488a95de590d84c309c16b33e53961a35e24583072c39cbdbbdbcc'

    const BOC_FIFT_HEX_LARGE = 'b5ee9c7201023201000498000114ff00f4a413f4bcf2c80b0102012002030201480405000cf2308048f2f00202cb0607020120282902012008090201ce26270201200a0b02012017180201200c0d02012011120201200e0f00215fa4001fa46804602c00012f2f4d3ff30801ed20120871c03cbc807434c0c05c6c2497c0f83c00cc4074c7dc208061a808f00023858cc074c7e01200a0841b5a5b9d2e84bcbd2082c63cd865d6f4cffe801400f880fe0048840d10015bc13e186084100d28f014842ea4cc3c033820842296cbb9d4842ea4cc3c03782082c63cd854842ea4cc3c03f82010001134c1c06a80b5c6006000588210982535785210ba9330f00ee08210b766741a5210ba9330f011e0821025d53dfdba92f010e0308048f2f002012013140201201516001d1c081cb232c072c032c1f2fff274200023104cfd039be8482540b5c04c00780c5c0ca0003d1c20043232c1417c010573c5893e808532da84b2c7f2cff3c4f260103ec020003d1c20043232c141bc0105b3c594013e808532dab2c7c4b2cff3c4f25c7ec020020120191a0201201f200201201b1c0201201d1e001d0060c1fd039be864fe800c380c1c20003b20128870403cbc8830802672007e8080a0c1fd10e5cc0060c1fd16cc38a000193b51343e803d013d0135350c20001f3214017e8084fd003d003333327b55200201202122020120232400ed3e105bc90c0c40b4fff4c7fe803d01347c0288e0080a60c1fc016011c07cbd2011d4c6eebcbd14cc3c0214d2bc020af232ffd5082e20083d10c06951543c0241291509243c025004fc02e084260abfffc97232ffd49032c7d4883d00095110d4a17c01e0840c19b443c0f232ffc4b2c7fd00104c3c01a000e33e105bc90c0c40b4fff4c7fe803d01347c02887434ffcc20125446eebcbd08e0080a60c1fc014c6011c07cbc94ca3c020a7232ffd50825a0083d10c1291508e43c0240bc02e0840d2212a4497232ffd49032c7d4883d00095110d4a17c01e0841c04df21c0f232ffc4b2c7fd00104c3c01a000793e105bc90c0c40b53d01347b5134350c3434ffcc201254c52ebcbd08b434ffcc201200aebcbd3c028c54943c02e0843218aeaf40b2333d00104c3c01a001f73e105bc90c80fd01347c02b434c03e8034c7f4c7fd010c2012c97cbd2012d4e4ae7cbd2012d4e4ee7cbd20134920840ee6b2802814032ec6fcbd3e097e0554c1e8483e0454c2e0083d039be864f4c7cc248c083880a94b20083d039be865900720083d05a74c083232c7f274100720083d05b882a9013232c01400e0250038fa02cb1fcb1f17f400c9f00b82101a69387e02c8cb1ff4004130f00600513e105bc90c0c40bd01347b5134350c3434ffcc20125444eebcbd20840764eab600723d00104c3c01a0005b3e105bc90c0c40b53d01347b5134350c3434ffcc201254452ebcbd087ec120841ca368e840b2333d00104c3c01a00201202a2b02012030310017bb9a5ed44d0d430d0d3ff3080201202c2d0201202e2f003bb6e53da89a1f401a803a1a7ffe00203e00203a861a1e0026209a8608a8100011b323bc02840d17c120002bb2fe7c02840917c120c1fd039be864fe800c380c1c200011bbbd182108325e4c38001db9c34f00a5f03802032028307f0058'
    const BOC_FIFT_BASE64_LARGE = 'te6ccgECMgEABJgAART/APSkE/S88sgLAQIBIAIDAgFIBAUADPIwgEjy8AICywYHAgEgKCkCASAICQIBziYnAgEgCgsCASAXGAIBIAwNAgEgERICASAODwAhX6QAH6RoBGAsAAEvL00/8wgB7SASCHHAPLyAdDTAwFxsJJfA+DwAzEB0x9wggGGoCPAAI4WMwHTH4BIAoIQbWludLoS8vSCCxjzYZdb0z/6AFAD4gP4ASIQNEAFbwT4YYIQQDSjwFIQupMw8AzgghCKWy7nUhC6kzDwDeCCCxjzYVIQupMw8A/ggEAARNMHAaoC1xgBgAFiCEJglNXhSELqTMPAO4IIQt2Z0GlIQupMw8BHgghAl1T39upLwEOAwgEjy8AIBIBMUAgEgFRYAHRwIHLIywHLAMsHy//J0IAAjEEz9A5voSCVAtcBMAHgMXAygAD0cIAQyMsFBfAEFc8WJPoCFMtqEssfyz/PE8mAQPsAgAD0cIAQyMsFBvAEFs8WUAT6AhTLassfEss/zxPJcfsAgAgEgGRoCASAfIAIBIBscAgEgHR4AHQBgwf0Dm+hk/oAMOAwcIAA7IBKIcEA8vIgwgCZyAH6AgKDB/RDlzABgwf0WzDigABk7UTQ+gD0BPQE1NQwgAB8yFAF+gIT9AD0AMzMye1UgAgEgISICASAjJADtPhBbyQwMQLT/9Mf+gD0BNHwCiOAICmDB/AFgEcB8vSAR1MbuvL0UzDwCFNK8AgryMv/VCC4gCD0QwGlRVDwCQSkVCSQ8AlAE/ALghCYKv//JcjL/1JAyx9SIPQAJURDUoXwB4IQMGbRDwPIy/8Syx/0AEEw8AaAA4z4QW8kMDEC0//TH/oA9ATR8Aoh0NP/MIBJURu68vQjgCApgwfwBTGARwHy8lMo8AgpyMv/VCCWgCD0QwSkVCOQ8AkC8AuCEDSISpElyMv/UkDLH1Ig9AAlRENShfAHghBwE3yHA8jL/xLLH/QAQTDwBoAB5PhBbyQwMQLU9ATR7UTQ1DDQ0/8wgElTFLry9CLQ0/8wgEgCuvL08AoxUlDwC4IQyGK6vQLIzPQAQTDwBoAH3PhBbyQyA/QE0fAK0NMA+gDTH9Mf9AQwgEsl8vSAS1OSufL0gEtTk7ny9IBNJIIQO5rKAKBQDLsb8vT4JfgVUwehIPgRUwuAIPQOb6GT0x8wkjAg4gKlLIAg9A5voZZAHIAg9BadMCDIyx/J0EAcgCD0FuIKpATIywBQA4CUAOPoCyx/LHxf0AMnwC4IQGmk4fgLIyx/0AEEw8AYAUT4QW8kMDEC9ATR7UTQ1DDQ0/8wgElRE7ry9IIQHZOq2AHI9ABBMPAGgAFs+EFvJDAxAtT0BNHtRNDUMNDT/zCASVEUuvL0IfsEghByjaOhAsjM9ABBMPAGgAgEgKisCASAwMQAXu5pe1E0NQw0NP/MIAgEgLC0CASAuLwA7tuU9qJofQBqAOhp//gAgPgAgOoYaHgAmIJqGCKgQABGzI7wChA0XwSAAK7L+fAKECRfBIMH9A5voZP6ADDgMHCAAEbu9GCEIMl5MOAAducNPAKXwOAIDICgwfwBY'
    const BOC_FIFT_BYTES_LARGE = hexToBytes(BOC_FIFT_HEX_LARGE)
    const BOC_FIFT_LARGE_HASH = '2f013a05f1522b9288e0412c524186f089ea30e87afc9a51395eed0019f2cf8f'

    const BOC_FIFT_HEX_WITH_DUPS = 'b5ee9c720101180100e800020310c201020163a90da09563b6740a4b7f68ca09fbdb76b0035cc101450a16e2e79b985ebbb38a0c5768616c657320546f6b656e0357484c40030119a1dcd65000000003200000032604003e1e68747470733a2f2f746f6e7768616c65732e636f6d2f636f6e74656e742f0203ccc0050602012007080201481415020120090a0201200f10000ba38000002cc00201200b0c0009b6000000c30201480d0e00094000000638000950000005f8000ba6000000304002012011170201581213000940000005c8000950000005e8000ba18000002ec002012016170009b4000000b70009d8000002d4'
    const BOC_FIFT_BASE64_WITH_DUPS = 'te6ccgEBGAEA6AACAxDCAQIBY6kNoJVjtnQKS39oygn723awA1zBAUUKFuLnm5heu7OKDFdoYWxlcyBUb2tlbgNXSExAAwEZodzWUAAAAAMgAAADJgQAPh5odHRwczovL3RvbndoYWxlcy5jb20vY29udGVudC8CA8zABQYCASAHCAIBSBQVAgEgCQoCASAPEAALo4AAACzAAgEgCwwACbYAAADDAgFIDQ4ACUAAAAY4AAlQAAAF+AALpgAAADBAAgEgERcCAVgSEwAJQAAABcgACVAAAAXoAAuhgAAALsACASAWFwAJtAAAALcACdgAAALU'
    const BOC_FIFT_BYTES_WITH_DUPS = hexToBytes(BOC_FIFT_HEX_WITH_DUPS)
    const BOC_FIFT_WITH_DUPS_HASH = '5049e60708f6f8aefb51009361aa6ad6fc6a14becd8d8bef37d10cf2e8ea281d'

    const BOC_FIFT_HEX_DEEP_DUPLICATED_HASHMAP = 'b5ee9c7241010901006a000101c0010202cb02030201200404020162060702012005050201200606020120080800434801f9c856c1260ecc28bf6928191e2b79c9a64d19c787ccb9d113c6d609690b7f0900432007e7215b04983b30a2fda4a06478ade7269934671e1f32e7444f1b5825a42dfc2404807a00'
    const BOC_FIFT_DEEP_DUPLICATED_HASHMAP_HASH = '69e794b89cef40a0ee3ab947cf8ea70736101d9c86ae4168406fc72964d1a9e6'

    const BOC_FIFTHEX = 'x{C8}\n x{62_}\n  x{6E_}\n   x{500A9}\n   x{400AA}\n  x{A08090C_}\n x{BEFDF21}'
    const BOC_FIFTHEX_HASH = '92f18ee3a6c7082d33a25b704a7e9fa06200d9541517c450733d1b8eb4d3dce4'

    describe('#from()', () => {
        it('should deserialize-serialize-deserialize boc from hex', () => {
            const cells1 = BOC.from(BOC_FIFT_HEX_LARGE)
            const cells2 = BOC.from(BOC_FIFT_HEX_WITH_DUPS)
            const cells3 = BOC.from(BOC_FIFT_HEX_DEEP_DUPLICATED_HASHMAP)

            const hex1 = BOC.toHex(cells1)
            const hex2 = BOC.toHex(cells2, {
                has_cache_bits: false,
                has_index: true,
                hash_crc32: true,
                topological_order: 'breadth-first',
                flags: 2
            })
            const hex3 = BOC.toHex(cells3)

            const result1 = BOC.from(hex1)
            const result2 = BOC.from(hex2)
            const result3 = BOC.from(hex3)

            expect(cells1.length).to.eq(1)
            expect(cells1[0].hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cells2.length).to.eq(1)
            expect(cells2[0].hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(cells3.length).to.eq(1)
            expect(cells3[0].hash()).to.eq(BOC_FIFT_DEEP_DUPLICATED_HASHMAP_HASH)

            expect(result1.length).to.eq(1)
            expect(result1[0].hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(result2.length).to.eq(1)
            expect(result2[0].hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(result3.length).to.eq(1)
            expect(result3[0].hash()).to.eq(BOC_FIFT_DEEP_DUPLICATED_HASHMAP_HASH)
        })

        it('should deserialize-serialize-deserialize standard boc from hex', () => {
            const cell1 = BOC.fromStandard(BOC_FIFT_HEX_LARGE)
            const cell2 = BOC.fromStandard(BOC_FIFT_HEX_WITH_DUPS)
            const hex1 = BOC.toHexStandard(cell1)
            const hex2 = BOC.toHexStandard(cell2, {
                has_cache_bits: false,
                has_index: true,
                hash_crc32: true,
                topological_order: 'breadth-first',
                flags: 2
            })
            const cell3 = BOC.fromStandard(hex1)
            const cell4 = BOC.fromStandard(hex2)

            expect(cell1.hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cell2.hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(cell3.hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cell4.hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
        })

        it('should deserialize-serialize-deserialize boc from fift hex', () => {
            const cells1 = BOC.from(BOC_FIFTHEX)
            const fift = BOC.toFiftHex(cells1)
            const cells2 = BOC.from(fift)

            expect(cells1.length).to.eq(1)
            expect(cells1[0].hash()).to.eq(BOC_FIFTHEX_HASH)
            expect(cells2.length).to.eq(1)
            expect(cells2[0].hash()).to.eq(BOC_FIFTHEX_HASH)
        })

        it('should deserialize-serialize-deserialize standard boc fift from hex', () => {
            const cell1 = BOC.fromStandard(BOC_FIFTHEX)
            const fift = BOC.toFiftHexStandard(cell1)
            const cell2 = BOC.fromStandard(fift)

            expect(cell1.hash()).to.eq(BOC_FIFTHEX_HASH)
            expect(cell2.hash()).to.eq(BOC_FIFTHEX_HASH)
        })

        it('should deserialize-serialize-deserialize boc from base64', () => {
            const cells1 = BOC.from(BOC_FIFT_BASE64_LARGE)
            const cells2 = BOC.from(BOC_FIFT_BASE64_WITH_DUPS)
            const base641 = BOC.toBase64(cells1)
            const base642 = BOC.toBase64(cells2, {
                has_cache_bits: false,
                has_index: true,
                hash_crc32: true,
                topological_order: 'breadth-first',
                flags: 2
            })
            const cells3 = BOC.from(base641)
            const cells4 = BOC.from(base642)

            expect(cells1.length).to.eq(1)
            expect(cells1[0].hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cells2.length).to.eq(1)
            expect(cells2[0].hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(cells3.length).to.eq(1)
            expect(cells3[0].hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cells4.length).to.eq(1)
            expect(cells4[0].hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
        })

        it('should deserialize-serialize-deserialize standard boc from base64', () => {
            const cell1 = BOC.fromStandard(BOC_FIFT_BASE64_LARGE)
            const cell2 = BOC.fromStandard(BOC_FIFT_BASE64_WITH_DUPS)
            const base641 = BOC.toBase64Standard(cell1)
            const base642 = BOC.toBase64Standard(cell2, {
                has_cache_bits: false,
                has_index: true,
                hash_crc32: true,
                topological_order: 'breadth-first',
                flags: 2
            })
            const cell3 = BOC.fromStandard(base641)
            const cell4 = BOC.fromStandard(base642)

            expect(cell1.hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cell2.hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(cell3.hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cell4.hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
        })

        it('should deserialize-serialize-deserialize boc from bytes', () => {
            const cells1 = BOC.from(BOC_FIFT_BYTES_LARGE)
            const cells2 = BOC.from(BOC_FIFT_BYTES_WITH_DUPS)
            const hex1 = BOC.toBytes(cells1)
            const hex2 = BOC.toBytes(cells2, {
                has_cache_bits: false,
                has_index: true,
                hash_crc32: true,
                topological_order: 'breadth-first',
                flags: 2
            })
            const cells3 = BOC.from(hex1)
            const cells4 = BOC.from(hex2)

            expect(cells1.length).to.eq(1)
            expect(cells1[0].hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cells2.length).to.eq(1)
            expect(cells2[0].hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(cells3.length).to.eq(1)
            expect(cells3[0].hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cells4.length).to.eq(1)
            expect(cells4[0].hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
        })

        it('should deserialize-serialize-deserialize standard boc from bytes', () => {
            const cell1 = BOC.fromStandard(BOC_FIFT_BYTES_LARGE)
            const cell2 = BOC.fromStandard(BOC_FIFT_BYTES_WITH_DUPS)
            const hex1 = BOC.toBytesStandard(cell1)
            const hex2 = BOC.toBytesStandard(cell2, {
                has_cache_bits: false,
                has_index: true,
                hash_crc32: true,
                topological_order: 'breadth-first',
                flags: 2
            })
            const cell3 = BOC.fromStandard(hex1)
            const cell4 = BOC.fromStandard(hex2)

            expect(cell1.hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cell2.hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
            expect(cell3.hash()).to.eq(BOC_FIFT_LARGE_HASH)
            expect(cell4.hash()).to.eq(BOC_FIFT_WITH_DUPS_HASH)
        })

        it('should deserialize-serialize-deserialize boc with exotic cells', () => {
            const cell1 = BOC.fromStandard(BOC_LAST_BASE64)
            const base64standard1 = BOC.toBase64Standard(cell1)
            const cell2 = BOC.fromStandard(base64standard1)

            expect(cell1.hash()).to.eq(BOC_LAST_HASH)
            expect(cell2.hash()).to.eq(BOC_LAST_HASH)
        })

        it('should deserialize boc containing merkle proofs with checkMerkleProofs=true', () => {
            const result = () => BOC.fromStandard(BOC_LAST_BASE64, true)

            expect(result).to.not.throw()
        })

        it('should throw error on boc deserialization that does not contain merkle proofs with checkMerkleProofs=true', () => {
            const result = () => BOC.fromStandard(BOC_FIFT_HEX_LARGE, true)

            expect(result).to.throw('BOC does not contain Merkle Proofs')
        })
    })
})
